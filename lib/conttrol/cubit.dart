
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screen_wake/flutter_screen_wake.dart';
import 'package:quraan/conttrol/states.dart';
import 'package:quraan/model/aladhan_model/aladhan.dart';
import 'package:quraan/model/azkar_app.dart';
import 'package:quraan/model/hides_model.dart';
import 'package:quraan/model/quraan.dart';
import 'package:quraan/network/dio.dart';
import 'package:sqflite/sqflite.dart';

import '../azkar/azkar_screen.dart';
import '../model/weather_model/newweather.dart';
import '../model/weather_model/weather.dart';

class Quraan extends Cubit<ShopState>{
  Quraan() : super(InitialState());
  static Quraan get(context)=>BlocProvider.of(context);
  Autogenerated autogenerated;
  Hadith hadith;
  List<Color> colors = [
    //Color.fromRGBO(r, g, b, opacity),
    Colors.lightBlue[100],
    Colors.teal[100],
    Colors.pink[100],
    Colors.amberAccent[100],
    Colors.indigo[100],
    Colors.orange[100],
    Colors.deepPurple[100],
    Colors.lightGreen[200],
  ];




  int saphanumber=0;
  List<Color> Sephacolors = [
    Colors.red,
    Colors.green,
    Colors.indigoAccent,
    Colors.black87,
    Colors.orange,
    Colors.lightBlueAccent,
  ];
  dynamic getcolorssapha(int index){
    saphanumber=index;
    emit(SephaChangesabhaState());
  }
  List<Map>addazkars=[];

  //sqflite database
Database database;
void createDatabase()
{
  openDatabase(
   'azkar.db',
   version: 1,
   onCreate: (database,version)
   {
     print('databasecreate');
      database.execute('CREATE TABLE Azkar(id INTEGER PRIMARY KEY,title TEXT)').then((value){
        print('tablecreate');
      }).catchError((error){
        print(error.toString());
      });
   },
   onOpen:(database){
     GetDatabase(database).then((value) {
       addazkars=value;
       print(addazkars);
       emit(getdatabaseState());
     });
     print('databaseobend');
   }
 ).then((value) {
   database=value;
   emit(createdatabaseState());
  });
}
 InsertTodatabase({
  @required String title,
})async
{
  await database.transaction((txn){
    txn.rawInsert('INSERT INTO Azkar(title)VALUES("$title")').then((value) {
      print('$value  yes insert ');
      emit(insertdatabaseState());
      GetDatabase(database).then((value) {
        addazkars=value;
        print(addazkars);
        emit(getdatabaseState());
      });
    }).catchError((error){
      print(error.toString());
    });
    return null;
  });
}


double fontSize=28;

void PlusFontSize(){
  if(fontSize<=40){
    fontSize++;
  }
  emit(SuccessPlusFontSizeState());
}

  void MinusFontSize(){
    if(fontSize>=20){
      fontSize--;
    }
    emit(SuccessMinusFontSizeState());
  }

Future <List<Map>> GetDatabase(database)async
{
  emit(getdatabaseLoadingState());
  return await database.rawQuery('SELECT *FROM Azkar');

}

void deletdata({
  @required int id,
})async
{
  database.rawDelete('DELETE FROM Azkar WHERE id = ?', [id]).then((value) {
   // GetDatabase(database);
    GetDatabase(database).then((value) {
      addazkars=value;
      print(addazkars);
      emit(getdatabaseState());
    });
    emit(deletdatabaseState());
  });
}

  int count=0;
  void changesabha(){
    count++;
    emit(SuccessChangesabhaState());
  }
  void tasver(){
    count=0;
    emit(zerooChangesabhaState());
  }
  int colorNumber=0;
  dynamic chang;
  int azkarindex=0;
  dynamic changeColorIndex(index){
    colorNumber = index;
    emit(ChangeColorState());
  }
  void getQuruan(){
    emit(LoadingState());
    DioHelper.getdata().then((value) {
      autogenerated=Autogenerated.fromJson(value.data);
      print('+++++++++++++++++++++++');
      print(autogenerated.data.surahs[1].ayahs[1].sajda);
      print('+++++++++++++++++++++++');
      emit(SuccessState());
    }).catchError((e){
      print('+++++++++++++++++++++++');
      print(e.toString());
      print('+++++++++++++++++++++++');
      emit(ErrorState(e.toString()));
    });
  }
//////////////////////////////////

  ////////////////////////////////
  void GetHides(){
    emit(LoadingHidesState());
    DioHelper.getHides().then((value) {
      hadith=Hadith.fromJson(value.data);
      print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');
      print(hadith.data.hadiths[2].arab);
      print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');
      emit(SuccessHidesState());
    }).catchError((error){
      print('))))))))))))))))))))))))))))))))))))))))))');
      print(error.toString());
      print(')))))))))))))))))))))))))))))))))))))))))))');
      emit(ErrorHidesState(error));
    });
  }

  aladhan aladhans;
  void getAdhan(){
    emit(LoadingaladhanState());
    DioHelper.getaladan().then((value) {
      aladhans=aladhan.fromJson(value.data);
      print(aladhans.data.timings.fajr);
      emit(SuccessaladhanState());
    }).catchError((error){
      print(error.toString());
      emit(ErroraladhanState(error.toString()));
    });
  }

  //weather weatherapp;
  weathernew we;
  weatherquran weatherquraan;

  void getweather({
  @required String name,
}){
    emit(LoadingweatherState());
    DioHelper.getW(
        data: {
      'q':name,
      'aqi':'no',
      'key':'7c4113870a8c45d994d15644222507',
       'days':1,
       'alerts':'no',
    }).then((value) {
     // weatherapp=weather.fromJson(value.data);
     // we=weathernew.fromJson(value.data);
      weatherquraan=weatherquran.fromJson(value.data);
      print('======so=====so');
      print(weatherquraan.forecast.forecastday[0].date);
      print('======so=====so');
      emit(SuccessweatherState());
    }).catchError((error){
      print('======mo=====m0');
      print(error.toString());
      print('======mo=====m0');
      emit(ErrorweatherState(error.toString()));
    });
  }

  String getImage(){
    if(weatherquraan.current.condition.text=='Sunny'||weatherquraan.current.condition.text=='Clear'){
      return 'image/113.png';
    }else if(weatherquraan.current.condition.text=='Partly cloudy'){
      return 'image/116.png';
    }else if(weatherquraan.current.condition.text=='Cloudy'){
      return 'image/119.png';
    }else if(weatherquraan.current.condition.text=='Mist'){
      return 'image/143.png';
    }else if(weatherquraan.current.condition.text=='Patchy rain possible'){
      return 'image/176.png';
    }else if(weatherquraan.current.condition.text=='Patchy snow possible'){
      return 'image/179.png';
    }else if(weatherquraan.current.condition.text=='Light rain'){
      return 'image/296.png';
    }else{
      return 'image/368.png';
    }

  }


}